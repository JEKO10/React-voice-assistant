{"version":3,"sources":["context.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","AppProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","translate","setTranslate","console","log","react_default","a","createElement","Provider","value","useAlan","alanBtnInstance","useRef","useEffect","current","alanBtn","key","onCommand","_onCommand","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","voice","stop","_x","apply","this","arguments","useGlobalContext","useContext","axios","require","default","App","_useGlobalContext","lang","setLang","_useState3","_useState4","translateValue","setTranslateValue","_useState5","_useState6","from","setFrom","_useState7","_useState8","to","setTo","fetchLanguages","get","headers","accept","then","res","Fragment","onChange","e","target","map","option","code","name","type","defaultValue","onClick","params","URLSearchParams","append","post","Content-Type","translatedText","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5e889921.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nfunction AppProvider({ children }) {\r\n  const [translate, setTranslate] = useState(\"\");\r\n\r\n  const useAlan = () => {\r\n    const key =\r\n      \"6021b8d3aee085781766709cc7c80efe2e956eca572e1d8b807a3e2338fdd0dc/stage\";\r\n\r\n    const alanBtnInstance = useRef(null);\r\n\r\n    useEffect(() => {\r\n      if (!alanBtnInstance.current) {\r\n        alanBtnInstance.current = alanBtn({\r\n          key,\r\n          onCommand: async (data) => {\r\n            if (data.voice) setTranslate(data.voice);\r\n          },\r\n        });\r\n      }\r\n    }, [translate]);\r\n  };\r\n\r\n  console.log(translate);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ useAlan, translate }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nconst axios = require(\"axios\").default;\r\n\r\nfunction App() {\r\n  const { useAlan, translate } = useGlobalContext();\r\n\r\n  const [lang, setLang] = useState([]);\r\n  const [translateValue, setTranslateValue] = useState(\"\");\r\n  const [from, setFrom] = useState(\"en\");\r\n  const [to, setTo] = useState(\"en\");\r\n\r\n  const fetchLanguages = async () => {\r\n    axios\r\n      .get(\"https://libretranslate.de/languages\", {\r\n        headers: { accept: \"application/json\" },\r\n      })\r\n      .then((res) => {\r\n        setLang(res.data);\r\n      });\r\n  };\r\n\r\n  const translateInput = () => {\r\n    const params = new URLSearchParams();\r\n    params.append(\"q\", translate);\r\n    params.append(\"source\", from);\r\n    params.append(\"target\", to);\r\n    params.append(\"api_key\", \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\r\n\r\n    axios\r\n      .post(\"https://libretranslate.de/translate\", params, {\r\n        headers: {\r\n          accept: \"application/json\",\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setTranslateValue(res.data.translatedText);\r\n      });\r\n  };\r\n\r\n  useAlan({ fetchLanguages });\r\n\r\n  useEffect(() => {\r\n    fetchLanguages();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        From ({from}):{\" \"}\r\n        <select\r\n          onChange={(e) => {\r\n            setFrom(e.target.value);\r\n          }}\r\n        >\r\n          {lang.map((option) => {\r\n            return (\r\n              <option value={option.code} key={option.code}>\r\n                {option.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        <input type=\"text\" defaultValue={translate} />\r\n      </div>\r\n      <div>\r\n        To ({to}):{\" \"}\r\n        <select\r\n          onChange={(e) => {\r\n            setTo(e.target.value);\r\n          }}\r\n        >\r\n          {lang.map((option) => {\r\n            return (\r\n              <option value={option.code} key={option.code}>\r\n                {option.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        <input type=\"text\" defaultValue={translateValue} />\r\n      </div>\r\n      <button onClick={translateInput}>Translate</button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./sass/index.css\";\r\nimport App from \"./App.jsx\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}