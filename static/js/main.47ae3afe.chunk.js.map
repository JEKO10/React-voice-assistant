{"version":3,"sources":["App.js","useAlan.js","reportWebVitals.js","index.js"],"names":["axios","require","default","App","_useState","useState","_useState2","Object","slicedToArray","lang","setLang","fetchLanguages","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","get","headers","accept","then","res","data","stop","apply","this","arguments","translate","setTranslate","alanBtnInstance","useRef","useEffect","current","alanBtn","key","onCommand","_onCommand","voice","console","log","_x","useAlan","react_default","createElement","Fragment","map","option","value","code","name","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"qPAEA,IAAMA,EAAQC,EAAQ,IAASC,QAiDhBC,MA/Cf,WAAe,IAAAC,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACAI,EADAJ,EAAA,GAGPK,EAAc,eAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACrBrB,EACGsB,IAAI,sCAAuC,CAC1CC,QAAS,CAAEC,OAAQ,sBAEpBC,KAAK,SAACC,GACLhB,EAAQgB,EAAIC,QANK,wBAAAR,EAAAS,SAAAX,MAAH,yBAAAL,EAAAiB,MAAAC,KAAAC,YAAA,GAgBpB,OCpBa,SAAAnB,GAAqCA,EAAlBD,eAAkB,IAAAP,EAChBC,mBAAS,IADOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3C4B,EAD2C1B,EAAA,GAChC2B,EADgC3B,EAAA,GAM5C4B,EAAkBC,iBAAO,MAE/BC,oBAAU,WACHF,EAAgBG,UACnBH,EAAgBG,QAAUC,IAAQ,CAChCC,IAPJ,yEAQIC,UAAS,eAAAC,EAAAlC,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAE,SAAAC,EAAOU,GAAP,OAAAb,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACLM,EAAKe,OAAOC,QAAQC,IAAIjB,EAAKe,OACjCT,EAAaN,EAAKe,OAFT,wBAAAvB,EAAAS,SAAAX,MAAF,gBAAA4B,GAAA,OAAAJ,EAAAZ,MAAAC,KAAAC,YAAA,OAMZ,CAACC,IDJJc,CAAQ,CAAEnC,mBAEVyB,oBAAU,WACRzB,KACC,IAGDoC,EAAAhC,EAAAiC,cAAAD,EAAAhC,EAAAkC,SAAA,KACEF,EAAAhC,EAAAiC,cAAA,mBAEED,EAAAhC,EAAAiC,cAAA,cACGvC,EAAKyC,IAAI,SAACC,GACT,OACEJ,EAAAhC,EAAAiC,cAAA,UAAQI,MAAOD,EAAOE,KAAMd,IAAKY,EAAOE,MACrCF,EAAOG,SANlB,MAYEP,EAAAhC,EAAAiC,cAAA,cACGvC,EAAKyC,IAAI,SAACC,GACT,OACEJ,EAAAhC,EAAAiC,cAAA,UAAQI,MAAOD,EAAOE,KAAMd,IAAKY,EAAOE,MACrCF,EAAOG,YE7BTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAlC,KAAAiC,EAAAE,KAAA,UAAqBnC,KAAK,SAAAb,GAAiD,IAA9CiD,EAA8CjD,EAA9CiD,OAAQC,EAAsClD,EAAtCkD,OAAQC,EAA8BnD,EAA9BmD,OAAQC,EAAsBpD,EAAtBoD,OAAQC,EAAcrD,EAAdqD,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvB,EAAAhC,EAAAiC,cAACD,EAAAhC,EAAMwD,WAAP,KACExB,EAAAhC,EAAAiC,cAACwB,EAAD,QAOJjB","file":"static/js/main.47ae3afe.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport useAlan from \"./useAlan\";\r\nconst axios = require(\"axios\").default;\r\n\r\nfunction App() {\r\n  const [lang, setLang] = useState([]);\r\n\r\n  const fetchLanguages = async () => {\r\n    axios\r\n      .get(\"https://libretranslate.de/languages\", {\r\n        headers: { accept: \"application/json\" },\r\n      })\r\n      .then((res) => {\r\n        setLang(res.data);\r\n      });\r\n  };\r\n\r\n  useAlan({ fetchLanguages });\r\n\r\n  useEffect(() => {\r\n    fetchLanguages();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        From:\r\n        <select>\r\n          {lang.map((option) => {\r\n            return (\r\n              <option value={option.code} key={option.code}>\r\n                {option.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        To:\r\n        <select>\r\n          {lang.map((option) => {\r\n            return (\r\n              <option value={option.code} key={option.code}>\r\n                {option.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\r\n\r\nexport default function useAlan({ fetchLanguages }) {\r\n  const [translate, setTranslate] = useState(\"\");\r\n\r\n  const key =\r\n    \"6021b8d3aee085781766709cc7c80efe2e956eca572e1d8b807a3e2338fdd0dc/stage\";\r\n\r\n  const alanBtnInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!alanBtnInstance.current) {\r\n      alanBtnInstance.current = alanBtn({\r\n        key,\r\n        onCommand: async (data) => {\r\n          if (data.voice) console.log(data.voice);\r\n          setTranslate(data.voice);\r\n        },\r\n      });\r\n    }\r\n  }, [translate]);\r\n\r\n  return null;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./sass/index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}